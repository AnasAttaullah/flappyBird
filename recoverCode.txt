import kaboom from "kaboom";
import "kaboom/global";

// Initialize context
kaboom();

// Load assets
loadSprite("bird", "sprites/bird.png");
loadSprite("pipe", "sprites/pipe.png");
loadSprite("bg", "sprites/bg.png");
loadSprite("button", "sprites/button.png");
loadSprite("gameover", "sprites/gameover.png");

// Add button function
function addButton(txt, onclick) {}

// =========================
// GAME SCENE / INGAME LOGIC
// =========================

scene("game", () => {
  // Variables
  const gap = 150; // bigger no = big gap
  setGravity(1600);
  let score = 0;

  // Adding sprites
  add([sprite("bg", { width: width(), height: height() })]);

  const bird = add([sprite("bird"), pos(70, 80), area(), scale(0.2), body()]);
  const SCORE_TEXT = add([
    pos(24, 24),
    text("Score : " + score, {
      size: 48,
      width: 320,
      font: "sans-serif",
    }),
  ]);

  // Jump function
  onKeyPress("space", () => {
    bird.jump(500);
  });

  bird.onCollide("pipe", () => {
    debug.log("Game Over");
  });

  // Function to produce pipes
  function producePipes() {
    const offset = rand(-250, 250);

    const pipe = add([
      sprite("pipe"),
      pos(width(), height() / 2 + offset + gap),
      area(),
      scale(0.4),
      { passed: false },
      "pipe",
    ]);
    const pipeTop = add([
      sprite("pipe", { flipY: true }),
      pos(width(), height() / 2 + offset - gap),
      anchor("botleft"),
      area(),
      scale(0.4),
      "pipe",
    ]);

    pipe.onUpdate(() => {
      pipe.move(-160, 0);
      pipeTop.move(-160, 0);
    });
    // Score logic
    bird.onUpdate(() => {
      if (bird.pos.x > pipe.pos.x && pipe.passed === false) {
        pipe.passed = true;
        score++;
        SCORE_TEXT.text = "Score :" + score;
      }
    });
  }
  loop(2.5, () => {
    producePipes();
  });

  // Gameover logic
  bird.onCollide("pipe", () => go("outro"));
  bird.onUpdate(() => {
    if (bird.pos.y > height() + 20 || bird.pos.y < -300) {
      go("outro");
    }
  });
});

// ===============
// Gameover Screen
// ===============

scene("outro", () => {
  // Variables
  let animationSpeed = 0.3;
  let normalSclae = vec2(1);
  let hoverScale = vec2(1.3);
  // Adding Sprites
  add([sprite("bg", { width: width(), height: height() })]);

  add([
    sprite("gameover", { height: 250 }),
    pos(width() / 2, height() / 2 - 200),
    anchor("center"),
  ]);

  const button = add([
    sprite("button"),
    pos(center()),
    area({ cursor: "pointer" }),
    scale(),
    anchor("center"),
    "button",
  ]);
  const restart_text = add([
    text("Restart", { font: "sans-serif" }),
    anchor("center"),
    scale(),
    color(BLACK),
    pos(button.pos.x, button.pos.y),
  ]);
  // Button Animation
  button.onHover(() => {
    button.scale = button.scale.lerp(hoverScale, animationSpeed);
    restart_text.scale = restart_text.scale.lerp(hoverScale, animationSpeed);
  });
  button.onHoverEnd(() => {
    button.scale = button.scale.lerp(normalSclae, animationSpeed);
    restart_text.scale = restart_text.scale.lerp(normalSclae, animationSpeed);
  });
  addButton("testing", () => go("game"));
  button.onClick(() => go("game"));
});

go("game");
